"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤ –≤ –±–æ—Ç–µ
"""

import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import Config
from keyboards.main_keyboard import get_test_start_keyboard, get_test_answer_keyboard
from services.test_service import TestService

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
class TestStates(StatesGroup):
    waiting_for_start = State()
    answering_question = State()

@router.message(Command("test"))
async def cmd_test(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test - –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        test_data = TestService.create_test(message.from_user.id)
        
        if not test_data:
            await message.answer(Config.MESSAGES['no_cards'])
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            Config.MESSAGES['test_start'].format(count=len(test_data['cards'])),
            reply_markup=get_test_start_keyboard()
        )
        
        await state.set_state(TestStates.waiting_for_start)
        
    except Exception as e:
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def handle_test_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'"""
    await cmd_test(message, state)

@router.callback_query(F.data == "test_start")
async def callback_test_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    
    if not TestService.get_test(user_id):
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /test")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_question(callback.message, user_id)
    await state.set_state(TestStates.answering_question)
    await callback.answer()

@router.callback_query(F.data == "test_cancel")
async def callback_test_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    
    TestService.remove_test(user_id)
    
    await callback.message.edit_text("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("test_answer:"))
async def callback_test_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_id = callback.from_user.id
    user_answer = callback.data.split(":", 1)[1]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    result = TestService.process_answer(user_id, user_answer)
    
    if not result:
        await callback.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result['is_correct']:
        result_text = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {result['word']} = {result['correct_answer']}"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! {result['word']} = {result['correct_answer']}"
    
    await callback.message.edit_text(result_text)
    
    if result['is_finished']:
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω
        await finish_test(callback.message, user_id)
        await state.clear()
    else:
        # –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await ask_question(callback.message, user_id)
    
    await callback.answer()

async def ask_question(message: Message, user_id: int):
    """–ó–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    question_data = TestService.get_current_question(user_id)
    
    if not question_data:
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    question_text = f"üìù –í–æ–ø—Ä–æ—Å {question_data['question_number']}/{question_data['total_questions']}\n\n"
    question_text += f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{question_data['card'].word}</b>?"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = get_test_answer_keyboard(question_data['answers'], question_data['correct_answer'])
    
    await message.answer(question_text, parse_mode="HTML", reply_markup=keyboard)

async def finish_test(message: Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    results = TestService.finish_test(user_id)
    
    if not results:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    final_text = TestService.format_test_results(results)
    
    await message.answer(final_text)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from keyboards.main_keyboard import get_main_keyboard
    from config import Config
    await message.answer(
        Config.MESSAGES['welcome'],
        reply_markup=get_main_keyboard()
    ) 
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∑–≤—É—á–∫–∏ —Å–ª–æ–≤
"""

import os
from aiogram import Router, F
from aiogram.types import Message, Voice
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import Config
from services.tts_service import TTSService

router = Router()

@router.message(Command("say"))
async def cmd_say(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /say - –æ–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace('/say', '').strip()
    
    if not text:
        await message.answer(TTSService.get_usage_message())
        return
    
    await process_tts_request(message, text)

@router.message(F.text == "üîä –û–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ")
async def handle_say_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ'"""
    await message.answer(
        "üîä –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–∑–≤—É—á–∫–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ hello\n"
        "‚Ä¢ beautiful\n"
        "‚Ä¢ –ø—Ä–∏–≤–µ—Ç\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /say —Å–ª–æ–≤–æ"
    )

@router.message(lambda message: message.text and message.text.startswith('/say '))
async def handle_say_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /say —Å –ø—Ä–æ–±–µ–ª–æ–º"""
    text = message.text.replace('/say ', '').strip()
    if text:
        await process_tts_request(message, text)

async def process_tts_request(message: Message, word: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–∑–≤—É—á–∫—É —Å–ª–æ–≤–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cleaned_word = TTSService.clean_word(word)
        
        if not TTSService.validate_word(cleaned_word):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ–≤–∞")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        lang = TTSService.detect_language(cleaned_word)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(TTSService.get_processing_message(cleaned_word))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        audio_path = await TTSService.generate_audio(cleaned_word, lang)
        
        if audio_path and os.path.exists(audio_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            with open(audio_path, 'rb') as audio_file:
                await message.answer_voice(
                    voice=audio_file,
                    caption=TTSService.format_audio_caption(cleaned_word, lang)
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
        else:
            await processing_msg.edit_text(TTSService.get_error_message(cleaned_word))
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ: {str(e)}") 
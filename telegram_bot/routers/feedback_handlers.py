"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –≤ –±–æ—Ç–µ
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import Config
from services.feedback_service import FeedbackService
from services.user_service import UserService
from asgiref.sync import sync_to_async
import logging

logger = logging.getLogger(__name__)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞
class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

@router.message(Command("feedback"))
async def cmd_feedback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await sync_to_async(UserService.get_or_create_user)(message.from_user.id)
        
        await message.answer(
            "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—Ç–∑—ã–≤—ã –æ —Å–µ—Ä–≤–∏—Å–µ LinguaTrack.\n\n"
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
            "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
        )
        
        await state.set_state(FeedbackStates.waiting_for_feedback)
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /feedback")
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def handle_feedback_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'"""
    await cmd_feedback(message, state)

@router.message(FeedbackStates.waiting_for_feedback)
async def handle_feedback_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""
    try:
        feedback_text = message.text.strip()
        
        if not feedback_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        result = await FeedbackService.send_feedback(feedback_text, message.from_user.id)
        
        if result.get('success'):
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
                "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏ —É—á—Ç—ë–º –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback —Å–Ω–æ–≤–∞."
            )
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {error_msg}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear() 
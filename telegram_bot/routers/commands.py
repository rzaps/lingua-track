"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.django_init import *

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from django.contrib.auth.models import User
from asgiref.sync import sync_to_async

from config import Config
from keyboards.main_keyboard import get_main_keyboard, get_cards_navigation_keyboard
from services.user_service import UserService
from utils.django_utils import get_user_by_telegram_id, link_telegram_to_existing_user, get_user_telegram_info

import logging
from services.http_client import HttpClient
_client = HttpClient()

logger = logging.getLogger(__name__)

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞)
def get_link_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]],
        resize_keyboard=True
    )

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
def get_link_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="add_email"),
                InlineKeyboardButton(text="üîó –°–≤—è–∑–∞—Ç—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º", callback_data="link_account")
            ]
        ]
    )

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏"""
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start (—Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏)
    start_param = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
    
    if start_param:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏
        await handle_link_token(message, start_param, telegram_id, telegram_username)
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /start
    user = await sync_to_async(get_user_by_telegram_id)(telegram_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–∞–ª—å–Ω—ã–π email (–∞ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π)
    if user and user.email.startswith("telegram_") and user.email.endswith("@linguatrack.local"):
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ Telegram
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinguaTrack!\n\n"
            "LinguaTrack ‚Äî —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç–æ—á–µ–∫, –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Ç–µ—Å—Ç–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "üîó –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤, –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ –∏ —Å–∞–π—Ç–∞!",
            reply_markup=get_link_keyboard()
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            Config.MESSAGES['welcome'],
            reply_markup=get_main_keyboard()
        )

async def handle_link_token(message: Message, token: str, telegram_id: int, telegram_username: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç —Å–∞–π—Ç–∞"""
    try:
        data = _client.post_json(
            f"{Config.SITE_URL}/users/api/v1/telegram-link-callback/",
            {
                'token': token,
                'telegram_id': telegram_id,
                'telegram_username': telegram_username
            }
        )
        if data.get('success'):
            username = data.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            await message.answer(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"üîó –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏: /cards\n"
                f"‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã: /test\n"
                f"‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /progress\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö\n\n"
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinguaTrack!",
                reply_markup=get_main_keyboard()
            )
        else:
            error_msg = data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {error_msg}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)\n"
                f"‚Ä¢ –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ.",
                reply_markup=get_link_keyboard()
            )
    except Exception:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_link_keyboard()
        )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(Config.MESSAGES['help'])

@router.message(Command("today"))
async def cmd_today(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        today_cards = await sync_to_async(UserService.get_today_reviews)(message.from_user.id)
        
        if not today_cards:
            await message.answer(Config.MESSAGES['no_reviews_today'])
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards_text = "üìö –°–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        cards_text += await sync_to_async(UserService.format_cards_for_display)(today_cards)
        cards_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π!"
        
        await message.answer(cards_text, parse_mode="HTML")
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /today")
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(Command("progress"))
async def cmd_progress(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        progress = await sync_to_async(UserService.get_user_statistics)(message.from_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        stats_text = await sync_to_async(UserService.format_statistics_for_display)(progress)
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /progress")
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(Command("cards"))
async def cmd_cards(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cards - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards = await sync_to_async(UserService.get_user_cards)(message.from_user.id)
        
        if not cards:
            await message.answer(Config.MESSAGES['no_cards'])
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards_text = await sync_to_async(UserService.format_cards_for_display)(cards)
        
        await message.answer(cards_text, parse_mode="HTML")
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /cards")
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(Command("link"))
async def cmd_link(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    telegram_id = message.from_user.id
    user = await sync_to_async(get_user_by_telegram_id)(telegram_id)
    
    if user and not user.email.startswith("telegram_"):
        # –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
        telegram_info = await sync_to_async(get_user_telegram_info)(user)
        
        link_text = f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!\n\n"
        link_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
        link_text += f"üìß Email: {user.email}\n"
        link_text += f"üÜî Telegram ID: {telegram_info.get('telegram_id')}\n"
        
        if telegram_info.get('telegram_username'):
            link_text += f"üì± Username: @{telegram_info['telegram_username']}\n"
        
        link_text += f"\nüîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç: {Config.SITE_URL}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=Config.SITE_URL)],
                [InlineKeyboardButton(text="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞", callback_data="generate_auth_token")]
            ]
        )
        
        await message.answer(link_text, reply_markup=keyboard)
    else:
        # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
        link_text = "üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        link_text += "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n"
        link_text += "2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Telegram'\n"
        link_text += "3Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏\n"
        link_text += "4Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –±–æ—Ç–µ\n\n"
        link_text += f"üåê –°–∞–π—Ç: {Config.SITE_URL}"
        
        await message.answer(link_text)

@router.callback_query(F.data == "generate_auth_token")
async def handle_generate_auth_token(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞"""
	try:
		telegram_id = callback.from_user.id
		user = await sync_to_async(get_user_by_telegram_id)(telegram_id)
		
		if not user or user.email.startswith("telegram_"):
			await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram")
			return
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API —Å–∞–π—Ç–∞
		data = _client.post_json(
			f"{Config.SITE_URL}/users/api/v1/generate-auth-token/",
			{'telegram_id': telegram_id}
		)
		
		if data.get('success'):
			auth_url = data.get('auth_url')
			expires_at = data.get('expires_at')
			
			auth_text = f"üîë –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞:\n\n"
			auth_text += f"‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {expires_at}\n\n"
			auth_text += f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –±–µ–∑ –ø–∞—Ä–æ–ª—è"
			
			keyboard = InlineKeyboardMarkup(
				inline_keyboard=[
					[InlineKeyboardButton(text="üåê –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=auth_url)]
				]
			)
			
			await callback.message.edit_text(auth_text, reply_markup=keyboard)
			await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
		else:
			await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
			
	except Exception as e:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º")

@router.message(Command("remind"))
async def cmd_remind(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        from services.reminder_service import ReminderService
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot = message.bot
        
        reminder_service = ReminderService(bot)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await reminder_service.send_manual_reminder(message.from_user.id)
        
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("cards_page:"))
async def callback_cards_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    page = int(callback.data.split(":")[1])
    await show_cards_page(callback.message, page)
    await callback.answer()

@router.callback_query(F.data == "cards_close")
async def callback_cards_close(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    await callback.message.delete()
    await callback.answer()

async def show_cards_page(message: Message, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards_data = await sync_to_async(UserService.get_user_cards_paginated)(message.from_user.id, page, Config.CARDS_PER_PAGE)
        
        if not cards_data['cards']:
            await message.answer(Config.MESSAGES['no_cards'])
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cards_text = f"üóÇ –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{cards_data['total_pages']}):\n\n"
        cards_text += await sync_to_async(UserService.format_cards_for_display)(cards_data['cards'])
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = get_cards_navigation_keyboard(page, cards_data['total_pages'])
        
        await message.answer(cards_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(Config.MESSAGES['not_registered'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–µ –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏)
@router.message(F.text == "üìö –°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_today_button(message: Message):
    await cmd_today(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_progress_button(message: Message):
    await cmd_progress(message)

@router.message(F.text == "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏")
async def handle_cards_button(message: Message):
    await cmd_cards(message)

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    await cmd_help(message)

# –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link (link_account)

@router.message(lambda message: message.text and message.text.startswith("/link_username "))
async def link_username(message: Message):
    """–°–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ username"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        username = message.text.replace("/link_username ", "").strip()
        if not username:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username —Å —Å–∞–π—Ç–∞ LinguaTrack")
            return
        
        telegram_id = message.from_user.id
        telegram_username = message.from_user.username
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        user = await sync_to_async(link_telegram_to_existing_user)(telegram_id, telegram_username, username)
        
        await message.answer(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º <b>{username}</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/today - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
            f"/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
            f"/progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/cards - –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏",
            parse_mode="HTML"
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")

class AddEmailStates(StatesGroup):
    waiting_for_email = State()

@router.message(Command("add_email"))
async def cmd_add_email(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É:")
    await state.set_state(AddEmailStates.waiting_for_email)

EMAIL_REGEX = r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"

@router.message(AddEmailStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(EMAIL_REGEX, email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
    email_exists = await sync_to_async(User.objects.filter(email=email).exists)()
    if email_exists:
        await message.answer("‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = await sync_to_async(get_user_by_telegram_id)(message.from_user.id)
    user.email = email
    await sync_to_async(user.save)()

    await message.answer(
        "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –ø–æ email. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–∞—Ä–æ–ª—å ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' –Ω–∞ —Å–∞–π—Ç–µ."
    )
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        Config.MESSAGES['welcome'],
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
@router.message(F.text == "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def handle_link_button(message: Message):
    await message.answer(
        "–î–ª—è —Å–≤—è–∑–∏ –≤–∞—à–µ–≥–æ Telegram —Å —Å–∞–π—Ç–æ–º LinguaTrack –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
        reply_markup=get_link_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "add_email")
async def handle_add_email_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É:")
    await state.set_state(AddEmailStates.waiting_for_email)
    await callback.answer()

@router.callback_query(F.data == "link_account")
async def handle_link_account_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "–î–ª—è —Å–≤—è–∑–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ:\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: http://127.0.0.1:8000/register/\n"
        "2Ô∏è‚É£ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/link_username –≤–∞—à_username_—Å_—Å–∞–π—Ç–∞</code>\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ø—Ä–∏–≤—è–∑–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
        parse_mode="HTML"
    )
    await callback.answer() 
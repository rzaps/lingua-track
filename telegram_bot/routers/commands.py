"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import Config
from keyboards.main_keyboard import get_main_keyboard, get_cards_navigation_keyboard
from services.user_service import UserService
from utils.django_utils import get_user_by_telegram_id, link_telegram_to_existing_user, get_user_telegram_info

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        Config.MESSAGES['welcome'],
        reply_markup=get_main_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(Config.MESSAGES['help'])

@router.message(Command("today"))
async def cmd_today(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        today_cards = UserService.get_today_reviews(message.from_user.id)
        
        if not today_cards:
            await message.answer(Config.MESSAGES['no_reviews_today'])
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards_text = "üìö –°–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        cards_text += UserService.format_cards_for_display(today_cards)
        cards_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π!"
        
        await message.answer(cards_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(Command("progress"))
async def cmd_progress(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        progress = UserService.get_user_statistics(message.from_user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        stats_text = UserService.format_statistics_for_display(progress)
        
        await message.answer(stats_text)
        
    except Exception as e:
        await message.answer(Config.MESSAGES['not_registered'])

@router.message(Command("cards"))
async def cmd_cards(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cards - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    await show_cards_page(message, 1)

@router.message(Command("remind"))
async def cmd_remind(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        from services.reminder_service import ReminderService
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –±–æ—Ç–æ–º
        from main import bot
        reminder_service = ReminderService(bot)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await reminder_service.send_manual_reminder(message.from_user.id)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")

@router.callback_query(F.data.startswith("cards_page:"))
async def callback_cards_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    page = int(callback.data.split(":")[1])
    await show_cards_page(callback.message, page)
    await callback.answer()

@router.callback_query(F.data == "cards_close")
async def callback_cards_close(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    await callback.message.delete()
    await callback.answer()

async def show_cards_page(message: Message, page: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        cards_data = UserService.get_user_cards_paginated(message.from_user.id, page, Config.CARDS_PER_PAGE)
        
        if not cards_data['cards']:
            await message.answer(Config.MESSAGES['no_cards'])
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        cards_text = f"üóÇ –í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{cards_data['total_pages']}):\n\n"
        cards_text += UserService.format_cards_for_display(cards_data['cards'])
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = get_cards_navigation_keyboard(page, cards_data['total_pages'])
        
        await message.answer(cards_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(Config.MESSAGES['not_registered'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.message(F.text == "üìö –°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_today_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'"""
    await cmd_today(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_progress_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    await cmd_progress(message)

@router.message(F.text == "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏")
async def handle_cards_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ä—Ç–æ—á–∫–∏'"""
    await cmd_cards(message)

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    await cmd_help(message) 

@router.message(Command("link"))
async def link_account(message: Message):
    """–°–≤—è–∑—ã–≤–∞–µ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Django"""
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    try:
        user = get_user_by_telegram_id(telegram_id)
        telegram_info = get_user_telegram_info(user)
        
        if telegram_info['is_telegram_user']:
            await message.answer(
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π LinguaTrack!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/today - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
                "/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
                "/progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/cards - –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"
            )
            return
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—é
    await message.answer(
        "üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å LinguaTrack\n\n"
        "–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –Ω–∞ —Å–∞–π—Ç–µ:\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: http://127.0.0.1:8000/register/\n"
        "2Ô∏è‚É£ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
        f"   ‚Ä¢ Telegram ID: <code>{telegram_id}</code>\n"
        f"   ‚Ä¢ Telegram Username: <code>{telegram_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n"
        "3Ô∏è‚É£ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/link_username –≤–∞—à_username_—Å_—Å–∞–π—Ç–∞</code>\n\n"
        "–ü–æ—Å–ª–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏ –≤ –±–æ—Ç–µ!",
        parse_mode="HTML"
    )

@router.message(lambda message: message.text and message.text.startswith("/link_username "))
async def link_username(message: Message):
    """–°–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ username"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        username = message.text.replace("/link_username ", "").strip()
        if not username:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ username —Å —Å–∞–π—Ç–∞ LinguaTrack")
            return
        
        telegram_id = message.from_user.id
        telegram_username = message.from_user.username
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        user = link_telegram_to_existing_user(telegram_id, telegram_username, username)
        
        await message.answer(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º <b>{username}</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/today - —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
            f"/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
            f"/progress - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/cards - –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏",
            parse_mode="HTML"
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞") 
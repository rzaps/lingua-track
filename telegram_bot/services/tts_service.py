"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∑–≤—É—á–∫–æ–π —Å–ª–æ–≤ (TTS)
"""

import os
import re
from typing import Optional

class TTSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∑–≤—É—á–∫–æ–π —Å–ª–æ–≤"""
    
    @staticmethod
    def detect_language(text: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —Ç–æ —Ä—É—Å—Å–∫–∏–π, –∏–Ω–∞—á–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cyrillic_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
        
        if cyrillic_pattern.search(text):
            return 'ru'
        else:
            return 'en'
    
    @staticmethod
    def clean_word(word: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–æ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        return re.sub(r'[^\w\s-]', '', word).strip()
    
    @staticmethod
    def validate_word(word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω—ã–º"""
        cleaned_word = TTSService.clean_word(word)
        return len(cleaned_word) > 0 and len(cleaned_word) <= 100
    
    @staticmethod
    async def generate_audio(word: str, lang: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Å–ª–æ–≤–∞
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS –∏–∑ Django
            import sys
            import os
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
            django_path = os.path.join(os.getcwd(), '..')
            sys.path.append(django_path)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lingua_track.settings')
            import django
            django.setup()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS
            from words.utils import generate_tts
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            relative_path = generate_tts(word, lang)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            from django.conf import settings
            absolute_path = os.path.join(settings.MEDIA_ROOT, relative_path)
            
            return absolute_path
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: {e}")
            return None
    
    @staticmethod
    def format_audio_caption(word: str, lang: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        return f"üîä {word} ({lang.upper()})"
    
    @staticmethod
    def get_processing_message(word: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return f"üîä –û–∑–≤—É—á–∏–≤–∞—é —Å–ª–æ–≤–æ '{word}'..."
    
    @staticmethod
    def get_error_message(word: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ '{word}'"
    
    @staticmethod
    def get_usage_message() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        return """üîä –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say —Å–ª–æ–≤–æ

–ü—Ä–∏–º–µ—Ä—ã:
/say hello
/say –ø—Ä–∏–≤–µ—Ç
/say beautiful

–ë–æ—Ç –æ–∑–≤—É—á–∏—Ç —Å–ª–æ–≤–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —è–∑—ã–∫–µ.""" 
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

import asyncio
from datetime import datetime, time
from typing import List
from utils.django_utils import get_today_cards
from django.contrib.auth.models import User
import logging

logger = logging.getLogger(__name__)

class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self, bot):
        self.bot = bot
        self.reminder_task = None
    
    async def start_reminder_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.reminder_task = asyncio.create_task(self._reminder_loop())
    
    async def stop_reminder_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.reminder_task:
            self.reminder_task.cancel()
    
    async def _reminder_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while True:
            try:
                # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                now = datetime.now()
                next_hour = now.replace(minute=0, second=0, microsecond=0)
                if next_hour <= now:
                    next_hour = next_hour.replace(hour=next_hour.hour + 1)
                
                wait_seconds = (next_hour - now).total_seconds()
                await asyncio.sleep(wait_seconds)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if now.hour == 10:  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00
                    await self._send_daily_reminders()
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def _send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            from asgiref.sync import sync_to_async
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
            users = await sync_to_async(list)(User.objects.filter(username__startswith='telegram_'))
            
            for user in users:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram ID –∏–∑ username
                    telegram_id = int(user.username.replace('telegram_', ''))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                    today_cards = await sync_to_async(get_today_cards)(user)
                    
                    if today_cards:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        await self._send_reminder(telegram_id, today_cards)
                    
                except (ValueError, Exception) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _send_reminder(self, telegram_id: int, cards: List):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message = "üîî –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!\n\n"
            message += f"–£ –≤–∞—Å {len(cards)} —Å–ª–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            
            for i, card in enumerate(cards[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                level_emoji = {
                    'beginner': 'üü¢',
                    'intermediate': 'üü°', 
                    'advanced': 'üî¥'
                }.get(card.level, '‚ö™')
                
                message += f"{i}. {level_emoji} {card.word} ‚Äî {card.translation}\n"
            
            if len(cards) > 5:
                message += f"\n... –∏ –µ—â—ë {len(cards) - 5} —Å–ª–æ–≤"
            
            message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /today –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–ª–æ–≤"
            message += "\n–ò–ª–∏ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π!"
            
            await self.bot.send_message(telegram_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {telegram_id}: {e}")
    
    async def send_manual_reminder(self, telegram_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—É—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from utils.django_utils import get_user_by_telegram_id
            from asgiref.sync import sync_to_async
            
            user = await sync_to_async(get_user_by_telegram_id)(telegram_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            today_cards = await sync_to_async(get_today_cards)(user)
            
            if today_cards:
                await self._send_reminder(telegram_id, today_cards)
            else:
                await self.bot.send_message(
                    telegram_id, 
                    "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}") 